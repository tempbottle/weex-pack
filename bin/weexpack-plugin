#!/usr/bin/env node

const program = require('commander');
const chalk = require('chalk');
const create = require('../src/create/create');
const cli = require('../src/cli');
const publish = require('../src/publish/publish');
program
  .command('create [plugin_name]')
  .description('create a empty plugin project')
  .action(function (pluginName) {
    if (pluginName.match(/^[$A-Z_][0-9A-Z_-]*$/i)) {
      create(pluginName, program.config)
    } else {
      console.log();
      console.log(`  ${chalk.red('Invalid plugin name:')} ${chalk.yellow(pluginName)}`);
      process.exit();
    }
  });
program
  .option('--ali', 'publish to alibaba internal market(only for alibaba internal network)')
  .option('-d,--verbose')
  .option('-v,--version')
  .option('--help')
  .option('--silent')
  .option('--experimental')
  .option('--noregistry')
  .option('--nohooks')
  .option('--shrinkwrap')
  .option('-s,--copy-from [copy-from]')
  .option('--link-to')
  .option('--searchpath [searchpath]')
  .option('--variable')
  .option('--link')
  .option('--force')
  .option('--debug')
  .option('--release')
  .option('--archs [archs]')
  .option('--device')
  .option('--emulator')
  .option('--target [target]')
  .option('--browserify')
  .option('--noprepare')
  .option('--fetch')
  .option('--nobuild')
  .option('--list')
  .option('--buildConfig [buildConfig]')
  .option('-t,--template [template]')
  .command('publish')
  .description('publish current plugin')
  .action(function () {
    publish(program.ali);
  });
program
  .command('*')
  .description('setup specific plugin into your project')
  .action(function (pluginName) {
    var arr = process.argv.slice(0, 2);
    arr.push('plugin');
    arr = arr.concat(process.argv.slice(2));
    cli(arr);
  });
program.parse(process.argv);

if (program.args.length < 1) {
  program.help();
  process.exit();
}
